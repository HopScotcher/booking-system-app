// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/*
Hybrid booking schema:
- Includes NextAuth-compatible tables (Account, Session, VerificationToken).
- Business includes optional soft-delete and JSON settings for hours and rules.
- User is compatible with NextAuth. Email is globally unique by default.
- Booking stores both normalized relations and denormalized service snapshot fields
  so you preserve price/duration at time of booking without extra joins.
*/

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/*
User model. Global unique email for authentication convenience.
If you want to allow the same email on multiple businesses, remove `@unique`
from email and instead add a composite unique on [email, businessId].
*/
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  phone         String?
  password      String?   // For credentials provider or optional local auth
  role          Role      @default(CUSTOMER)
  image         String?
  accounts      Account[]
  sessions      Session[]
  bookings      Booking[]
  businessId    String?   // optional staff/admin association to a specific business
  business      Business? @relation(fields: [businessId], references: [id], onDelete: SetNull)
  isActive      Boolean   @default(true)
  deletedAt     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([businessId])
  @@index([role])
  @@index([isActive])
  @@index([deletedAt])
}

/*
Business model that supports SaaS features:
- slug for friendly URLs.
- businessHours and bookingSettings stored as JSON for flexibility.
- soft delete via deletedAt.
*/
model Business {
  id               String    @id @default(cuid())
  name             String
  slug             String?   @unique
  email            String
  phone            String?
  address          String?
  description      String?
  logo             String?
  isActive         Boolean   @default(true)
  businessHours    Json?     // e.g. { "mon": ["09:00","17:00"], ... }
  bookingSettings  Json?     // e.g. rules for lead time, min/max booking duration
  services         Service[]
  bookings         Booking[]
  users            User[]    // staff/admin accounts that belong to this business
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  deletedAt        DateTime?

  @@index([slug])
  @@index([isActive])
  @@index([deletedAt])
}

/*
Service model. Keep light and straightforward.
Include soft delete only if you expect to restore services later.
*/
model Service {
  id           String    @id @default(cuid())
  businessId   String
  business     Business  @relation(fields: [businessId], references: [id], onDelete: Cascade)
  name         String
  description  String?
  price        Float
  duration     Int       // minutes
  isActive     Boolean   @default(true)
  bookings     Booking[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?

  @@index([businessId])
  @@index([isActive])
  @@index([deletedAt])
}

/*
Booking model: hybrid approach
- Primary relation to business and service for easy queries.
- Denormalized snapshot fields for serviceName, servicePrice, serviceDuration.
- appointmentDate and appointmentTime split so date filtering is simpler.
- confirmationCode ensures idempotency and shareable links.
- reminderSent and timestamps help with notification workflows.
- Soft delete via deletedAt is included so you can restore if needed.
*/
model Booking {
  id                 String         @id @default(cuid())
  businessId         String
  business           Business       @relation(fields: [businessId], references: [id], onDelete: Cascade)

  serviceId          String?
  service            Service?       @relation(fields: [serviceId], references: [id], onDelete: SetNull)

  // denormalized snapshot
  serviceName        String?
  servicePrice       Float?
  serviceDuration    Int?

  customerName       String
  customerEmail      String
  customerPhone      String
  customerAddress    String?
  appointmentDate    DateTime
  appointmentTime    String         // "09:00", "14:30"
  duration           Int            // minutes. default to serviceDuration on create
  totalPrice         Float?

  notes              String?
  status             BookingStatus  @default(PENDING)
  userId             String?        // registered user if any
  user               User?          @relation(fields: [userId], references: [id], onDelete: SetNull)

  confirmationCode   String         @unique @default(cuid())
  reminderSent       Boolean        @default(false)
  completedAt        DateTime?
  cancelledAt        DateTime?
  cancellationNote   String?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  deletedAt          DateTime?

  @@index([businessId])
  @@index([serviceId])
  @@index([customerEmail])
  @@index([appointmentDate])
  @@index([status])
  @@index([confirmationCode])
  @@index([createdAt])
}

enum BookingStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum Role {
  CUSTOMER
  ADMIN
  STAFF
  SUPER_ADMIN
}
