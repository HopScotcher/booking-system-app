// schema.prisma file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/// User model. Global unique email for authentication convenience.
/// If you want to allow the same email on multiple businesses, remove `@unique`
/// from email and instead add a composite unique on [email, businessId].
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  phone         String?
  password      String?
  role          Role      @default(CUSTOMER)
  image         String?
  businessId    String?
  isActive      Boolean   @default(true)
  deletedAt     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  bookings      Booking[]
  sessions      Session[]
  business      Business? @relation(fields: [businessId], references: [id])

  @@index([businessId])
  @@index([role])
  @@index([isActive])
  @@index([deletedAt])
}

/// Business model that supports SaaS features:
/// - slug for friendly URLs.
/// - businessHours and bookingSettings stored as JSON for flexibility.
/// - soft delete via deletedAt.
model Business {
  id              String    @id @default(cuid())
  name            String
  slug            String?   @unique
  email           String
  phone           String?
  address         String?
  description     String?
  logo            String?
  isActive        Boolean   @default(true)
  businessHours   Json?
  bookingSettings Json?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?
  bookings        Booking[]
  services        Service[]
  users           User[]

  @@index([slug])
  @@index([isActive])
  @@index([deletedAt])
}

/// Service model. Keep light and straightforward.
/// Include soft delete only if you expect to restore services later.
model Service {
  id          String    @id @default(cuid())
  businessId  String
  name        String
  description String?
  price       Float
  duration    Int
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  bookings    Booking[]
  business    Business  @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@index([businessId])
  @@index([isActive])
  @@index([deletedAt])
}

/// Booking model: hybrid approach
/// - Primary relation to business and service for easy queries.
/// - Denormalized snapshot fields for serviceName, servicePrice, serviceDuration.
/// - appointmentDate and appointmentTime split so date filtering is simpler.
/// - confirmationCode ensures idempotency and shareable links.
/// - reminderSent and timestamps help with notification workflows.
/// - Soft delete via deletedAt is included so you can restore if needed.
model Booking {
  id               String        @id @default(cuid())
  businessId       String
  serviceId        String?
  serviceName      String
  servicePrice     Float?
  serviceDuration  Int?
  customerName     String
  customerEmail    String
  customerPhone    String
  customerAddress  String?
  appointmentDate  DateTime
  appointmentTime  String
  duration         Int
  totalPrice       Float?
  notes            String?
  status           BookingStatus @default(PENDING)
  userId           String?
  confirmationCode String        @unique @default(cuid())
  reminderSent     Boolean       @default(false)
  completedAt      DateTime?
  cancelledAt      DateTime?
  cancellationNote String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  deletedAt        DateTime?
  business         Business      @relation(fields: [businessId], references: [id], onDelete: Cascade)
  service          Service?      @relation(fields: [serviceId], references: [id])
  user             User?         @relation(fields: [userId], references: [id])

  @@index([businessId])
  @@index([serviceId])
  @@index([customerEmail])
  @@index([appointmentDate])
  @@index([status])
  @@index([confirmationCode])
  @@index([createdAt])
}

enum BookingStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum Role {
  CUSTOMER
  ADMIN
  STAFF
  SUPER_ADMIN
}
